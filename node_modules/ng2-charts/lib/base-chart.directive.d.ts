import { DoCheck, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Color } from './color';
import { ThemeService } from './theme.service';
import { BaseChartMetaConfig } from './chartjs/base-chart-meta-config';
import { PluginServiceGlobalRegistration } from './chartjs/plugin-service-global-registration';
import { PluginServiceRegistrationOptions } from './chartjs/plugin-service-registration-options';
import { ChartOptions } from './chartjs/chart-options';
import { ChartConfiguration } from './chartjs/chart-configuration';
import { AngularChart } from './chartjs/angular-chart';
export declare type SingleDataSet<T extends BaseChartMetaConfig> = T['datasetTypes']['data'];
export declare type MultiDataSet<T extends BaseChartMetaConfig> = Array<T['datasetTypes']['data']>;
export declare type SingleOrMultiDataSet<T extends BaseChartMetaConfig> = SingleDataSet<T> | MultiDataSet<T>;
export declare type PluginServiceGlobalRegistrationAndOptions<T extends BaseChartMetaConfig> = PluginServiceGlobalRegistration & PluginServiceRegistrationOptions<T>;
export declare type SingleLineLabel = string;
export declare type MultiLineLabel = string[];
export declare type Label = SingleLineLabel | MultiLineLabel;
export declare class BaseChartDirective<T extends BaseChartMetaConfig> implements OnDestroy, OnChanges, OnInit, OnDestroy, DoCheck {
    private element;
    private themeService;
    data: T['datasetTypes']['data'];
    datasets: T['datasetTypes'][];
    labels: Label[];
    options: ChartOptions<T>;
    chartType: T['datasetTypes']['type'];
    colors: Color[];
    legend: boolean;
    plugins: PluginServiceGlobalRegistrationAndOptions<T>[];
    chartClick: EventEmitter<{
        event?: MouseEvent;
        active?: {}[];
    }>;
    chartHover: EventEmitter<{
        event: MouseEvent;
        active: {}[];
    }>;
    ctx: string;
    chart: AngularChart<T>;
    private old;
    private subs;
    /**
     * Register a plugin.
     */
    static registerPlugin<T extends BaseChartMetaConfig>(plugin: PluginServiceGlobalRegistrationAndOptions<T>): void;
    static unregisterPlugin<T extends BaseChartMetaConfig>(plugin: PluginServiceGlobalRegistrationAndOptions<T>): void;
    constructor(element: ElementRef, themeService: ThemeService<T>);
    ngOnInit(): void;
    private themeChanged;
    ngDoCheck(): void;
    copyLabel(a: Label): Label;
    labelsEqual(a: Label, b: Label): boolean;
    copyColor(a: Color): Color;
    colorsEqual(a: Color, b: Color): boolean;
    updateColors(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    update(duration?: any): {};
    hideDataset(index: number, hidden: boolean): void;
    isDatasetHidden(index: number): boolean;
    toBase64Image(): string;
    getChartConfiguration(): ChartConfiguration<T>;
    getChartBuilder(ctx: string): AngularChart<T>;
    smartMerge(options: any, overrides: any, level?: number): any;
    private isChartDataSetsArray;
    private isMultiLineLabel;
    private joinLabel;
    private propagateDatasetsToData;
    private propagateDataToDatasets;
    private isMultiDataSet;
    private getDatasets;
    private refresh;
}
